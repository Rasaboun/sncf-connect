import { places } from "./types/type";
import { use, useEffect, useState } from "react";
type journey = {
  duration: number;
  departure_date_time: string;
  arrival_date_time: string;
  sections: section[];
};

type display_information = {
  label: string;
  color: string;
  commercial_mode: string;
};

type section = {
  type: string;
  duration: number;
  display_informations?: display_information;
};

type itineraireProps = {
  place: places;
  placesecond: places;
};

const resource_id_1 = "stop_area:IDFM:69925";
const resource_id_2 = "stop_area:IDFM:474151";

async function getData(from: string, to: string) {
  const res = await fetch(`/journey?from=${from}&to=${to}`);
  const data: journey[] = await res.json();
  return data;
}
export default function Itineraire({ place, placesecond }: itineraireProps) {
  const [journeys, setJourneys] = useState(Array<journey>);

  useEffect(() => {
    if (place.id != "" && placesecond.id != "")
      getData(place.id, placesecond.id).then((datas) => setJourneys(datas));
    else {
      setJourneys([]);
    }
  }, [place.id, placesecond.id]);
  if (journeys.length > 0) {
    return (
      <div className="max-w-7xl mx-4 flex flex-col space-y-4">
        {journeys.map((elem, id) => (
          <ItineraireList key={elem.departure_date_time + id} journey={elem} />
        ))}
      </div>
    );
  } else return <></>;
}

function ItineraireList({ journey }: { journey: journey }) {
  const depart = journey.departure_date_time;
  const arrive = journey.arrival_date_time;
  const departIso =
    depart.slice(0, 4) +
    "-" +
    depart.slice(4, 6) +
    "-" +
    depart.slice(6, 11) +
    ":" +
    depart.slice(11, 13) +
    ":" +
    depart.slice(13, 15);
  const arrivetIso =
    arrive.slice(0, 4) +
    "-" +
    arrive.slice(4, 6) +
    "-" +
    arrive.slice(6, 11) +
    ":" +
    arrive.slice(11, 13) +
    ":" +
    arrive.slice(13, 15);

  const departDate = new Date(departIso);
  const arriveDate = new Date(arrivetIso);

  const itineraireTransport = journey.sections.map((elem, id) => (
    <ItineraireRow
      key={elem.type + id}
      elem={elem}
      id={id}
      section={journey.sections}
    />
  ));

  return (
	
    <div className="mt-4 flex flex-row bg-white rounded-xl w-full p-2 items-center md:w-3/5 md:ml-6 divide-x-2 divide-[#F3F3F8]">
      <div className="flex flex-col font-medium justify-center p-3">
        <p>
          {departDate.getHours().toLocaleString(undefined, {
            minimumIntegerDigits: 2,
            useGrouping: false,
          }) +
            ":" +
            departDate.getMinutes().toLocaleString(undefined, {
				minimumIntegerDigits: 2,
				useGrouping: false,
			  })}
        </p>
        <p>
          {arriveDate.getHours().toLocaleString(undefined, {
            minimumIntegerDigits: 2,
            useGrouping: false,
          }) +
            ":" +
            arriveDate.getMinutes().toLocaleString(undefined, {
				minimumIntegerDigits: 2,
				useGrouping: false,
			  })}
        </p>
      </div>
      <div className="flex flex-col  justify-start p-2">
        <div className="flex flex-row items-center justify-start">{itineraireTransport}</div>
        <div className="flex flex-row items-center space-x-1">
		<svg viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg" aria-hidden="true" className="w-4 h-4"><path d="M12 2C10.0222 2 8.08879 2.58649 6.4443 3.6853C4.79981 4.78412 3.51809 6.3459 2.76121 8.17317C2.00433 10.0004 1.8063 12.0111 2.19215 13.9509C2.578 15.8907 3.53041 17.6725 4.92894 19.0711C6.32746 20.4696 8.10929 21.422 10.0491 21.8079C11.9889 22.1937 13.9996 21.9957 15.8268 21.2388C17.6541 20.4819 19.2159 19.2002 20.3147 17.5557C21.4135 15.9112 22 13.9778 22 12C21.997 9.34877 20.9424 6.80699 19.0677 4.93228C17.193 3.05758 14.6512 2.00303 12 2ZM12 21C10.22 21 8.47991 20.4722 6.99987 19.4832C5.51983 18.4943 4.36628 17.0887 3.68509 15.4442C3.0039 13.7996 2.82567 11.99 3.17294 10.2442C3.5202 8.49836 4.37737 6.89471 5.63604 5.63604C6.89472 4.37737 8.49836 3.5202 10.2442 3.17293C11.99 2.82567 13.7996 3.0039 15.4442 3.68508C17.0887 4.36627 18.4943 5.51983 19.4832 6.99987C20.4722 8.47991 21 10.22 21 12C20.9973 14.3861 20.0482 16.6737 18.361 18.361C16.6737 20.0482 14.3861 20.9973 12 21ZM17.3755 7.55273C17.4219 7.59915 17.4588 7.65425 17.4839 7.71491C17.509 7.77556 17.522 7.84058 17.522 7.90623C17.522 7.97188 17.509 8.0369 17.4839 8.09755C17.4588 8.15821 17.4219 8.21331 17.3755 8.25973L12.3213 13.3134C12.2749 13.3599 12.2198 13.3967 12.1591 13.4218C12.0985 13.447 12.0334 13.4599 11.9678 13.4599C11.9021 13.4599 11.8371 13.447 11.7765 13.4218C11.7158 13.3967 11.6607 13.3599 11.6143 13.3134L7.87207 9.57129C7.77988 9.47721 7.72854 9.35055 7.7292 9.21884C7.72987 9.08712 7.78249 8.96098 7.87563 8.86784C7.96877 8.7747 8.0949 8.72208 8.22662 8.72142C8.35834 8.72075 8.485 8.7721 8.57907 8.86429L11.9677 12.253L16.6684 7.55276C16.7148 7.50631 16.77 7.46947 16.8306 7.44433C16.8913 7.41919 16.9563 7.40625 17.022 7.40625C17.0876 7.40624 17.1526 7.41918 17.2133 7.44431C17.274 7.46945 17.3291 7.50629 17.3755 7.55273Z"></path></svg>
			<p>{(journey.duration / 60).toFixed() + "min"}</p>
			</div>
      </div>
    </div>
  );
}

function SvgWalk({ duration }: { duration: string }) {
  return (
    <div className="flex flex-row items-end	-space-x-0.5">
      <svg
        viewBox="0 0 24 24"
        xmlns="http://www.w3.org/2000/svg"
        type="MODE"
        path="/modes/foot"
        role="img"
        className="w-6 h-6 "
      >
        <path d="M18.0735 11.543C18.0208 11.3197 17.9234 11.1095 17.7873 10.9248C17.6506 10.7387 17.4779 10.582 17.2795 10.4639C17.0832 10.3453 16.8656 10.2664 16.6389 10.2315C16.0775 10.1432 15.5639 9.86378 15.1848 9.44046C14.8176 9.0287 14.61 8.49896 14.5998 7.9473C14.5979 7.57382 14.4738 7.21123 14.2463 6.91498C14.0867 6.71636 13.8854 6.55534 13.6565 6.44336C14.0957 6.17547 14.4375 5.77382 14.6316 5.29738C14.8258 4.82093 14.8621 4.29479 14.7352 3.7962C14.6083 3.29762 14.3249 2.85285 13.9266 2.5272C13.5283 2.20154 13.0361 2.01216 12.5222 1.98686C12.0083 1.96156 11.4999 2.10166 11.0715 2.38661C10.6432 2.67155 10.3174 3.08633 10.1422 3.57003C9.96688 4.05374 9.9513 4.5809 10.0977 5.07411C10.2441 5.56733 10.5448 6.00062 10.9556 6.31036C9.80826 6.59579 8.77071 7.21344 7.97289 8.08592C7.16601 8.96463 6.65208 10.0723 6.50218 11.2558C6.41854 11.8369 6.41986 12.4271 6.5061 13.0078C6.54852 13.2334 6.63582 13.4482 6.7628 13.6394C6.88979 13.8307 7.05389 13.9944 7.24536 14.1211C7.61498 14.3733 8.06722 14.4743 8.50903 14.4033C8.8965 14.3375 9.25125 14.1452 9.51782 13.8564C9.41771 14.2869 9.2628 14.7027 9.05688 15.0937C8.6845 15.6601 8.11695 16.0699 7.46216 16.2451C6.97602 16.3718 6.55695 16.6801 6.29126 17.1064C6.02441 17.5303 5.93628 18.0426 6.04614 18.5312C6.15693 19.0201 6.45266 19.4471 6.87134 19.7226C7.30355 20.0057 7.82742 20.1132 8.33618 20.0234C9.17399 19.8222 9.96644 19.4651 10.6721 18.9707V20.1045C10.6721 20.3685 10.7273 20.6297 10.8342 20.8711C10.9476 21.1248 11.1137 21.3515 11.3215 21.5361L11.4641 21.6425C11.8401 21.8658 12.2671 21.9889 12.7043 22H12.717C12.8996 21.9995 13.0811 21.9711 13.2551 21.916C13.5538 21.82 13.8262 21.6563 14.051 21.4375C14.4085 21.0943 14.6153 20.6233 14.6262 20.1279V13.2217C15.0877 13.4209 15.5717 13.5633 16.0676 13.6455C16.5256 13.7188 16.9942 13.612 17.3752 13.3476C17.7536 13.0838 18.0117 12.6806 18.093 12.2265C18.1334 11.9998 18.1267 11.7671 18.0735 11.543ZM12.4016 2.99998C12.6792 2.99998 12.9505 3.08229 13.1812 3.23649C13.412 3.39068 13.5919 3.60985 13.6981 3.86628C13.8043 4.1227 13.8321 4.40486 13.778 4.67708C13.7238 4.9493 13.5902 5.19934 13.3939 5.3956C13.1976 5.59186 12.9476 5.72551 12.6754 5.77966C12.4032 5.83381 12.121 5.80602 11.8646 5.6998C11.6082 5.59359 11.389 5.41372 11.2348 5.18295C11.0806 4.95217 10.9983 4.68085 10.9983 4.4033C10.9988 4.03129 11.1468 3.67466 11.4099 3.4116C11.673 3.14855 12.0296 3.00052 12.4016 2.99998ZM16.8039 12.5273C16.635 12.6406 16.4301 12.6873 16.2288 12.6582C15.5764 12.551 14.951 12.3185 14.387 11.9736C14.3111 11.9273 14.2244 11.902 14.1355 11.9003C14.0467 11.8987 13.9591 11.9207 13.8816 11.9642C13.8041 12.0076 13.7396 12.071 13.6947 12.1476C13.6498 12.2243 13.6262 12.3115 13.6262 12.4004V20.1055C13.6235 20.1851 13.611 20.2642 13.5891 20.3408C13.5409 20.4854 13.4593 20.6166 13.3508 20.7236C13.238 20.8328 13.1017 20.9146 12.9524 20.9629C12.8764 20.9798 12.7994 20.9922 12.7219 21C12.4799 20.9948 12.2424 20.9329 12.0286 20.8193L11.97 20.7754C11.876 20.6892 11.8008 20.5844 11.7493 20.4678C11.6986 20.3533 11.6724 20.2296 11.6721 20.1045V17.9062C11.6721 17.8077 11.643 17.7114 11.5884 17.6293C11.5338 17.5473 11.4562 17.4832 11.3654 17.4451C11.2745 17.407 11.1744 17.3967 11.0776 17.4153C10.9809 17.4339 10.8918 17.4807 10.8215 17.5498C10.0783 18.2788 9.1528 18.7945 8.14183 19.043C7.8917 19.0832 7.63558 19.0281 7.42406 18.8887C7.22085 18.7562 7.07697 18.55 7.02269 18.3135C6.97052 18.081 7.01266 17.8373 7.13988 17.6358C7.27197 17.4249 7.47997 17.2729 7.72093 17.211C8.62768 16.9663 9.41072 16.3925 9.91722 15.6016C10.3554 14.7801 10.6052 13.8714 10.6487 12.9414V10.0713C10.6486 9.97087 10.6183 9.87283 10.5617 9.78988C10.5052 9.70692 10.425 9.64291 10.3315 9.60615C10.2381 9.56939 10.1358 9.56158 10.0379 9.58375C9.93993 9.60592 9.85095 9.65704 9.78246 9.73045C9.29726 10.2512 8.99519 10.916 8.9221 11.624V11.9843C8.92318 12.1696 8.93918 12.3544 8.96995 12.5371C8.97523 12.5933 8.97425 12.65 8.96702 12.706C8.96625 12.8753 8.90454 13.0386 8.79319 13.166C8.67775 13.2984 8.52006 13.3867 8.3469 13.416C8.20374 13.4366 8.05767 13.4168 7.92516 13.3588C7.79266 13.3008 7.67897 13.207 7.5969 13.0879C7.54715 13.0137 7.51171 12.9309 7.49241 12.8437C7.42292 12.3615 7.42325 11.8718 7.49341 11.3896C7.61695 10.408 8.04249 9.48898 8.71117 8.75975C9.37823 8.02925 10.2463 7.51215 11.2063 7.27342H13.1184C13.2501 7.32436 13.3653 7.41049 13.4514 7.52242C13.5475 7.6473 13.5997 7.80041 13.5998 7.95797C13.6131 8.75055 13.91 9.51212 14.4368 10.1045C14.9702 10.7009 15.6932 11.0949 16.4836 11.2197C16.5834 11.2351 16.6792 11.2695 16.7659 11.3213C16.8497 11.3714 16.9228 11.4378 16.9807 11.5166C17.0374 11.593 17.0782 11.68 17.1008 11.7724C17.1226 11.865 17.125 11.9611 17.1077 12.0547C17.0911 12.1497 17.0557 12.2405 17.0035 12.3217C16.9514 12.4028 16.8835 12.4728 16.8039 12.5273Z"></path>
      </svg>
      <p className="font-light text-xs text-[#646C7A]">{duration}</p>
    </div>
  );
}

function ItineraireRow({
  elem,
  id,
  section,
}: {
  elem: section;
  id: number;
  section: section[];
}) {
  if (elem.type == "street_network") {
    return (
      <>
        <SvgWalk
          key={elem.type + id}
          duration={(elem.duration / 60).toFixed()}
        />
        {Chevron(id, section) && (
          <svg
            viewBox="0 0 24 24"
            xmlns="http://www.w3.org/2000/svg"
            className="w-6 h-6 fill-[#5e6878]"
          >
            <path d="M8.79362 6.6659C8.36568 7.06175 8.36568 7.73825 8.79362 8.1341L12.973 12L8.79362 15.8659C8.36568 16.2617 8.36568 16.9383 8.79362 17.3341L8.83447 17.3719C9.21775 17.7264 9.80928 17.7264 10.1926 17.3719L15.2064 12.7341C15.6343 12.3383 15.6343 11.6617 15.2064 11.2659L10.1926 6.62811C9.80928 6.27358 9.21775 6.27358 8.83447 6.62811L8.79362 6.6659Z"></path>
          </svg>
        )}
      </>
    );
  }
  if (elem.type == "public_transport")
    return (
      <>
        {<TransportLogo elem={elem} id={id} />}

        {Chevron(id, section) && (
          <svg
            viewBox="0 0 24 24"
            xmlns="http://www.w3.org/2000/svg"
            className="w-6 h-6 fill-[#5e6878]"
          >
            <path d="M8.79362 6.6659C8.36568 7.06175 8.36568 7.73825 8.79362 8.1341L12.973 12L8.79362 15.8659C8.36568 16.2617 8.36568 16.9383 8.79362 17.3341L8.83447 17.3719C9.21775 17.7264 9.80928 17.7264 10.1926 17.3719L15.2064 12.7341C15.6343 12.3383 15.6343 11.6617 15.2064 11.2659L10.1926 6.62811C9.80928 6.27358 9.21775 6.27358 8.83447 6.62811L8.79362 6.6659Z"></path>
          </svg>
        )}
      </>
    );
}

function Chevron(id: number, section: section[]) {
  const isTransportorStreetnetwork = (element: section) =>
    element.type == "public_transport" || element.type == "street_network";

  if (section.findLastIndex(isTransportorStreetnetwork) > id) {
    return true;
  }
  return false;
}

function TransportLogo({ elem, id }: { elem: section; id: number }) {
  if (elem.display_informations?.commercial_mode == "Métro")
    return (
      <div className="flex flex-row space-x-0.5 items-center">
        <svg
          viewBox="0 0 24 24"
          xmlns="http://www.w3.org/2000/svg"
          type="MODE"
          path="/modes/metro"
          aria-label="Métro"
          role="img"
          className="w-6 h-6"
        >
          <path d="M12 2C6.475 2 2 6.475 2 12C2 17.525 6.475 22 12 22C17.525 22 22 17.525 22 12C22 6.475 17.525 2 12 2ZM12 20.7C7.19167 20.7 3.3 16.8083 3.3 12C3.3 7.19167 7.19167 3.3 12 3.3C16.8083 3.3 20.7 7.19167 20.7 12C20.7 16.8083 16.8083 20.7 12 20.7ZM16.975 16.475C16.975 16.95 16.6 17.225 16.15 17.225C15.75 17.225 15.3 16.95 15.3 16.475V9.975H15.275L12.8 15.025C12.625 15.375 12.4 15.575 12 15.575C11.6 15.575 11.375 15.375 11.2 15.025L8.725 9.975H8.7V16.475C8.7 16.95 8.25 17.225 7.85 17.225C7.4 17.225 7.025 16.95 7.025 16.475V7.75C7.025 7.25 7.3 6.725 8.125 6.725C8.75 6.725 9 7 9.275 7.55L12 13.175H12.025L14.725 7.55C15 7 15.25 6.725 15.875 6.725C16.7 6.725 16.975 7.25 16.975 7.75V16.475Z"></path>
        </svg>
        <span
          className={
            "text-white rounded-full  h-5 w-5 text-sm text-center font-semibold"
          }
          style={{ backgroundColor: `#${elem.display_informations?.color}` }}
          key={elem.type + id}
        >
          {elem.display_informations?.label}
        </span>
      </div>
    );
  if (elem.display_informations?.commercial_mode == "RER")
    return (
      <div className="flex flex-row space-x-0.5 items-center">
        <svg
          viewBox="0 0 24 24"
          xmlns="http://www.w3.org/2000/svg"
          type="MODE"
          path="/modes/rer"
          aria-label="RER"
          role="img"
          className="w-6 h-6"
        >
          <path d="M19.175 10.45C19.175 9.1 18.175 8.475 17.2 8.475H15.325C14.975 8.475 14.775 8.75 14.775 9.05V14.925C14.775 15.275 15.125 15.45 15.45 15.45C15.825 15.45 16.125 15.275 16.125 14.925V12.65H16.7L17.825 15.175C17.925 15.375 18.1 15.45 18.3 15.45C18.7 15.45 19.275 15.075 19.05 14.625L17.975 12.375C18.625 12.05 19.175 11.475 19.175 10.45ZM14.1 14.8C14.1 14.5 13.9 14.175 13.55 14.175H11.65V12.45H13.225C13.575 12.45 13.775 12.15 13.775 11.875C13.775 11.575 13.575 11.3 13.225 11.3H11.65V9.725H13.4C13.75 9.725 13.95 9.375 13.95 9.1C13.95 8.8 13.75 8.475 13.4 8.475H10.85C10.5 8.475 10.3 8.75 10.3 9.05V14.9C10.3 15.25 10.65 15.425 10.975 15.425H13.55C13.9 15.425 14.1 15.075 14.1 14.8ZM9.5 10.45C9.5 9.1 8.5 8.475 7.525 8.475H5.65C5.3 8.475 5.1 8.75 5.1 9.05V14.925C5.1 15.275 5.45 15.45 5.775 15.45C6.15 15.45 6.45 15.275 6.45 14.925V12.65H7.025L8.15 15.175C8.25 15.375 8.425 15.45 8.625 15.45C9.025 15.45 9.6 15.075 9.375 14.625L8.3 12.375C8.95 12.05 9.5 11.475 9.5 10.45ZM17.775 10.6C17.775 11.45 17 11.65 16.525 11.65H16.125V9.625H16.6C17.225 9.625 17.775 9.9 17.775 10.6ZM8.1 10.6C8.1 11.45 7.325 11.65 6.85 11.65H6.45V9.625H6.925C7.55 9.625 8.1 9.9 8.1 10.6ZM17.5 22H6.5C4.01667 22 2 19.9833 2 17.5V6.5C2 4.01667 4.01667 2 6.5 2H17.5C19.9833 2 22 4.01667 22 6.5V17.5C22 19.9833 19.9833 22 17.5 22ZM20.7 17.5V6.5C20.7 4.73333 19.2667 3.3 17.5 3.3H6.5C4.73333 3.3 3.3 4.73333 3.3 6.5V17.5C3.3 19.2667 4.73333 20.7 6.5 20.7H17.5C19.2667 20.7 20.7 19.2667 20.7 17.5Z"></path>
        </svg>
        <span
          className={
            "text-white rounded-md  w-5 h-5 text-center text-sm font-semibold"
          }
          style={{ backgroundColor: `#${elem.display_informations?.color}` }}
          key={elem.type + id}
        >
          {elem.display_informations?.label}
        </span>
      </div>
    );
  if (elem.display_informations?.commercial_mode == "Bus")
    return (
      <div className="flex flex-row space-x-0.5 items-center">
        <svg
          viewBox="0 0 24 24"
          xmlns="http://www.w3.org/2000/svg"
          type="MODE"
          path="/modes/bus"
          aria-label="Bus"
          role="img"
          className="w-6 h-6"
        >
          <path d="M19.225 13.375C19.225 12.35 18.65 11.75 17.925 11.35L17.375 11.05C17.05 10.875 16.775 10.6 16.775 10.25C16.775 9.85 17.1 9.575 17.575 9.575C17.9 9.575 18.2 9.7 18.425 9.8C18.775 9.975 19 9.75 19.1 9.375C19.225 8.95 19.05 8.8 18.75 8.65C18.45 8.5 18.025 8.4 17.6 8.4C16.425 8.4 15.45 9.175 15.45 10.425C15.45 11.4 15.95 11.95 16.75 12.4L17.325 12.725C17.675 12.925 17.9 13.2 17.9 13.575C17.9 14.05 17.45 14.275 17 14.275C16.65 14.275 16.225 14.125 16 14.025C15.625 13.85 15.425 14.075 15.3 14.475C15.175 14.9 15.375 15.075 15.7 15.225C16 15.375 16.525 15.5 17 15.5C18.225 15.5 19.225 14.675 19.225 13.375ZM14.85 13.125V8.975C14.85 8.625 14.5 8.45 14.175 8.45C13.825 8.45 13.5 8.625 13.5 8.975V12.95C13.5 13.75 13.25 14.275 12.6 14.275C11.975 14.275 11.675 13.775 11.675 12.95V8.975C11.675 8.625 11.3 8.45 10.975 8.45C10.6 8.45 10.275 8.625 10.275 8.975V13.1C10.275 14.75 11.1 15.5 12.6 15.5C13.95 15.5 14.85 14.725 14.85 13.125ZM9.625 13.425C9.625 12.275 8.825 11.85 8.4 11.775V11.75C8.9 11.5 9.5 11.025 9.5 10.175C9.5 9.025 8.5 8.475 7.525 8.475H5.65C5.3 8.475 5.1 8.75 5.1 9.05V14.9C5.1 15.25 5.45 15.425 5.775 15.425H7.55C8.625 15.425 9.625 14.85 9.625 13.425ZM8.1 10.5C8.1 11.15 7.55 11.375 6.975 11.375H6.45V9.625H6.975C7.575 9.625 8.1 9.825 8.1 10.5ZM8.3 13.275C8.3 13.95 7.925 14.275 7.125 14.275H6.525V12.325H7.125C7.625 12.325 8.3 12.5 8.3 13.275ZM21.35 3.3H2.65C2.29167 3.3 2 3.00833 2 2.65C2 2.29167 2.29167 2 2.65 2H21.35C21.7083 2 22 2.29167 22 2.65C22 3.00833 21.7083 3.3 21.35 3.3ZM21.35 22H2.65C2.29167 22 2 21.7083 2 21.35C2 20.9917 2.29167 20.7 2.65 20.7H21.35C21.7083 20.7 22 20.9917 22 21.35C22 21.7083 21.7083 22 21.35 22Z"></path>
        </svg>
        <span
          className={"text-white   w-fit px-0.5 h-5 text-center text-sm font-semibold"}
          style={{ backgroundColor: `#${elem.display_informations?.color}` }}
          key={elem.type + id}
        >
          {elem.display_informations?.label}
        </span>
      </div>
    );
  if (elem.display_informations?.commercial_mode == "Tramway")
    return (
      <div className="flex flex-row space-x-0.5 items-center">
        <svg
          viewBox="0 0 24 24"
          xmlns="http://www.w3.org/2000/svg"
          type="MODE"
          path="/modes/tramway"
          aria-label="Tramway"
          role="img"
          className="w-6 h-6"
        >
          <path d="M21.35 3.3H2.65C2.29167 3.3 2 3.00833 2 2.65C2 2.29167 2.29167 2 2.65 2H21.35C21.7083 2 22 2.29167 22 2.65C22 3.00833 21.7083 3.3 21.35 3.3ZM22 21.35C22 20.9917 21.7083 20.7 21.35 20.7H2.65C2.29167 20.7 2 20.9917 2 21.35C2 21.7083 2.29167 22 2.65 22H21.35C21.7083 22 22 21.7083 22 21.35ZM19.7167 18.6417C19.875 18.6417 20 18.5167 20 18.3583V18.0833C20 17.925 19.875 17.8 19.7167 17.8H4V18.6417H19.7167ZM4 14.05H6.90833C6.98333 14.05 7.05 13.9833 7.05 13.9083V10.0417C7.05 9.96667 6.98333 9.9 6.90833 9.9H4V9H8.54167L10.325 7.53333L8.08333 5.7C7.98333 5.61667 7.975 5.475 8.05 5.38333L8.19167 5.20833C8.275 5.10833 8.41667 5.1 8.50833 5.175L11.0583 7.26667C11.225 7.40833 11.225 7.66667 11.0583 7.80833L9.61667 9H16.5333C17.0833 9 17.6083 9.23333 17.975 9.63333C19.0667 10.825 19.7583 12.3 19.9833 13.8917C20.05 14.4 19.975 14.9 19.7583 15.3417C19.25 16.3667 18.2333 17 17.1 17H4V14.05ZM17.3 10.2333C17.1 10.0167 16.825 9.9 16.5333 9.9H14.0917C14.0167 9.9 13.95 9.96667 13.95 10.0417V13.9083C13.95 13.9833 14.0167 14.05 14.0917 14.05H18.2583C18.75 14.05 19.0417 13.6667 18.9167 13.1917C18.625 12.0917 18.075 11.0833 17.3 10.2333ZM12.9083 16.1C12.9833 16.1 13.05 16.0333 13.05 15.9583V10.0417C13.05 9.96667 12.9833 9.9 12.9083 9.9H11.0917C11.0167 9.9 10.95 9.96667 10.95 10.0417V15.9583C10.95 16.0333 11.0167 16.1 11.0917 16.1H12.9083ZM8.09167 9.9C8.01667 9.9 7.95 9.96667 7.95 10.0417V15.9583C7.95 16.0333 8.01667 16.1 8.09167 16.1H9.90833C9.98333 16.1 10.05 16.0333 10.05 15.9583V10.0417C10.05 9.96667 9.98333 9.9 9.90833 9.9H8.09167Z"></path>
        </svg>
        <span
          className={"text-black border-t-[3px] border-b-[3px]  w-6 h-fit  text-center text-xs font-semibold"}
          style={{ borderColor: `#${elem.display_informations?.color}` }}
          key={elem.type + id}
        >
          {elem.display_informations?.label}
        </span>
      </div>
    );
}
